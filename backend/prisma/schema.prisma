generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id               String   @id @default(uuid())
    phone            String?  @unique
    email            String?  @unique
    name             String?
    password         String
    emailVerified    Boolean  @default(false)
    phoneVerified    Boolean  @default(false)
    verificationCode String?
    isVerified       Boolean  @default(false)
    role             UserRole @default(USER)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    bookings Booking[]
    reviews  Review[]

    @@map("users")
}

model Facility {
    id            String   @id @default(cuid())
    name          String
    nameAr        String?
    description   String?  @db.Text
    descriptionAr String?  @db.Text
    address       String
    addressAr     String?
    latitude      Float?
    longitude     Float?
    phone         String?
    email         String?
    isActive      Boolean  @default(true)
    images        String?  @db.Text // JSON array of image URLs
    amenities     String?  @db.Text // JSON array of amenities
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    courts Court[]

    @@map("facilities")
}

model Court {
    id            String    @id @default(cuid())
    name          String
    nameAr        String?
    facilityId    String
    sportType     SportType
    pricePerHour  Decimal   @db.Decimal(8, 2)
    isActive      Boolean   @default(true)
    images        String?   @db.Text // JSON array of image URLs
    description   String?   @db.Text
    descriptionAr String?   @db.Text
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    facility     Facility            @relation(fields: [facilityId], references: [id], onDelete: Cascade)
    bookings     Booking[]
    availability CourtAvailability[]

    @@map("courts")
}

model CourtAvailability {
    id        String   @id @default(cuid())
    courtId   String
    dayOfWeek Int // 0 = Saturday, 1 = Sunday, 2 = Monday, etc.
    startTime String // Format: "HH:MM"
    endTime   String // Format: "HH:MM"
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())

    court Court @relation(fields: [courtId], references: [id], onDelete: Cascade)

    @@map("court_availability")
}

model Booking {
    id            String        @id @default(cuid())
    userId        String
    courtId       String
    startTime     DateTime
    endTime       DateTime
    totalPrice    Decimal       @db.Decimal(8, 2)
    status        BookingStatus @default(PENDING)
    paymentStatus PaymentStatus @default(PENDING)
    notes         String?       @db.Text
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    user     User      @relation(fields: [userId], references: [id])
    court    Court     @relation(fields: [courtId], references: [id])
    payments Payment[]

    @@map("bookings")
}

model Payment {
    id            String        @id @default(cuid())
    bookingId     String
    amount        Decimal       @db.Decimal(8, 2)
    status        PaymentStatus @default(PENDING)
    paymentMethod String?
    transactionId String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    booking Booking @relation(fields: [bookingId], references: [id])

    @@map("payments")
}

model Review {
    id         String   @id @default(cuid())
    userId     String
    facilityId String?
    courtId    String?
    rating     Int // 1-5
    comment    String?  @db.Text
    createdAt  DateTime @default(now())

    user User @relation(fields: [userId], references: [id])

    @@map("reviews")
}

enum UserRole {
    USER
    ADMIN
    FACILITY_MANAGER
}

enum SportType {
    FOOTBALL
    BASKETBALL
    TENNIS
    VOLLEYBALL
    BADMINTON
    SQUASH
    PADEL
    OTHER
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
}
